{"ast":null,"code":"import { useState } from 'react';\n\n// Generar salt aleatorio\nexport const generateSalt = () => {\n  const array = new Uint8Array(16);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n// Derivar clave de cifrado\nexport const deriveKey = async (password, salt) => {\n  const encoder = new TextEncoder();\n  const keyMaterial = await crypto.subtle.importKey('raw', encoder.encode(password), {\n    name: 'PBKDF2'\n  }, false, ['deriveKey']);\n  return crypto.subtle.deriveKey({\n    name: 'PBKDF2',\n    salt: encoder.encode(salt),\n    iterations: 100000,\n    hash: 'SHA-256'\n  }, keyMaterial, {\n    name: 'AES-GCM',\n    length: 256\n  }, false, ['encrypt', 'decrypt']);\n};\n\n// Cifrar datos\nexport const encryptData = async (data, password) => {\n  const salt = generateSalt();\n  const key = await deriveKey(password, salt);\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  const encrypted = await crypto.subtle.encrypt({\n    name: 'AES-GCM',\n    iv\n  }, key, new TextEncoder().encode(data));\n  return {\n    salt,\n    iv: Array.from(iv).map(b => b.toString(16).padStart(2, '0')).join(''),\n    data: Array.from(new Uint8Array(encrypted)).map(b => b.toString(16).padStart(2, '0')).join('')\n  };\n};\n\n// Descifrar datos\nexport const decryptData = async (encrypted, password) => {\n  const key = await deriveKey(password, encrypted.salt);\n  const iv = new Uint8Array(encrypted.iv.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n  const decrypted = await crypto.subtle.decrypt({\n    name: 'AES-GCM',\n    iv\n  }, key, new Uint8Array(encrypted.data.match(/.{1,2}/g).map(byte => parseInt(byte, 16))));\n  return new TextDecoder().decode(decrypted);\n};","map":{"version":3,"names":["useState","generateSalt","array","Uint8Array","crypto","getRandomValues","Array","from","byte","toString","padStart","join","deriveKey","password","salt","encoder","TextEncoder","keyMaterial","subtle","importKey","encode","name","iterations","hash","length","encryptData","data","key","iv","encrypted","encrypt","map","b","decryptData","match","parseInt","decrypted","decrypt","TextDecoder","decode"],"sources":["/Users/cesarvargastapia/CascadeProjects/study-planner/src/auth/cryptoUtils.js"],"sourcesContent":["import { useState } from 'react';\n\n// Generar salt aleatorio\nexport const generateSalt = () => {\n  const array = new Uint8Array(16);\n  crypto.getRandomValues(array);\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\n};\n\n// Derivar clave de cifrado\nexport const deriveKey = async (password, salt) => {\n  const encoder = new TextEncoder();\n  const keyMaterial = await crypto.subtle.importKey(\n    'raw',\n    encoder.encode(password),\n    {name: 'PBKDF2'},\n    false,\n    ['deriveKey']\n  );\n  \n  return crypto.subtle.deriveKey(\n    {\n      name: 'PBKDF2',\n      salt: encoder.encode(salt),\n      iterations: 100000,\n      hash: 'SHA-256'\n    },\n    keyMaterial,\n    {name: 'AES-GCM', length: 256},\n    false,\n    ['encrypt', 'decrypt']\n  );\n};\n\n// Cifrar datos\nexport const encryptData = async (data, password) => {\n  const salt = generateSalt();\n  const key = await deriveKey(password, salt);\n  const iv = crypto.getRandomValues(new Uint8Array(12));\n  \n  const encrypted = await crypto.subtle.encrypt(\n    {name: 'AES-GCM', iv},\n    key,\n    new TextEncoder().encode(data)\n  );\n  \n  return {\n    salt,\n    iv: Array.from(iv).map(b => b.toString(16).padStart(2, '0')).join(''),\n    data: Array.from(new Uint8Array(encrypted)).map(b => b.toString(16).padStart(2, '0')).join('')\n  };\n};\n\n// Descifrar datos\nexport const decryptData = async (encrypted, password) => {\n  const key = await deriveKey(password, encrypted.salt);\n  const iv = new Uint8Array(encrypted.iv.match(/.{1,2}/g).map(byte => parseInt(byte, 16)));\n  \n  const decrypted = await crypto.subtle.decrypt(\n    {name: 'AES-GCM', iv},\n    key,\n    new Uint8Array(encrypted.data.match(/.{1,2}/g).map(byte => parseInt(byte, 16)))\n  );\n  \n  return new TextDecoder().decode(decrypted);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}