{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\n\n// A simple versioning system for our local storage data.\n// If we change the data structure, we can increment this version.\nconst DATA_VERSION = '1.2'; // Bump version again to force a hard reset of inconsistent data\n\nexport function useLocalStorage(key, initialValue) {\n  _s();\n  const [value, setValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      if (item) {\n        const parsedItem = JSON.parse(item);\n        // Check if the data has a version and if it matches the current version\n        if (parsedItem.version === DATA_VERSION) {\n          return parsedItem.data;\n        }\n      }\n      // If no item, version mismatch, or error, return initial value\n      return initialValue;\n    } catch (error) {\n      console.error('Error reading from localStorage', error);\n      return initialValue;\n    }\n  });\n  useEffect(() => {\n    try {\n      // Wrap the data with a version number before saving\n      const itemToStore = {\n        version: DATA_VERSION,\n        data: value\n      };\n      window.localStorage.setItem(key, JSON.stringify(itemToStore));\n    } catch (error) {\n      console.error('Error writing to localStorage', error);\n    }\n  }, [key, value]);\n  return [value, setValue];\n}\n_s(useLocalStorage, \"lcR+cr6yNQ2sweA9KPReCCJGD1I=\");","map":{"version":3,"names":["useState","useEffect","DATA_VERSION","useLocalStorage","key","initialValue","_s","value","setValue","item","window","localStorage","getItem","parsedItem","JSON","parse","version","data","error","console","itemToStore","setItem","stringify"],"sources":["/Users/cesarvargastapia/CascadeProjects/study-planner/src/hooks/useLocalStorage.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\n// A simple versioning system for our local storage data.\n// If we change the data structure, we can increment this version.\nconst DATA_VERSION = '1.2'; // Bump version again to force a hard reset of inconsistent data\n\nexport function useLocalStorage(key, initialValue) {\n  const [value, setValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      if (item) {\n        const parsedItem = JSON.parse(item);\n        // Check if the data has a version and if it matches the current version\n        if (parsedItem.version === DATA_VERSION) {\n          return parsedItem.data;\n        }\n      }\n      // If no item, version mismatch, or error, return initial value\n      return initialValue;\n    } catch (error) {\n      console.error('Error reading from localStorage', error);\n      return initialValue;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      // Wrap the data with a version number before saving\n      const itemToStore = {\n        version: DATA_VERSION,\n        data: value,\n      };\n      window.localStorage.setItem(key, JSON.stringify(itemToStore));\n    } catch (error) {\n      console.error('Error writing to localStorage', error);\n    }\n  }, [key, value]);\n\n  return [value, setValue];\n}\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE3C;AACA;AACA,MAAMC,YAAY,GAAG,KAAK,CAAC,CAAC;;AAE5B,OAAO,SAASC,eAAeA,CAACC,GAAG,EAAEC,YAAY,EAAE;EAAAC,EAAA;EACjD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,MAAM;IACvC,IAAI;MACF,MAAMS,IAAI,GAAGC,MAAM,CAACC,YAAY,CAACC,OAAO,CAACR,GAAG,CAAC;MAC7C,IAAIK,IAAI,EAAE;QACR,MAAMI,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACN,IAAI,CAAC;QACnC;QACA,IAAII,UAAU,CAACG,OAAO,KAAKd,YAAY,EAAE;UACvC,OAAOW,UAAU,CAACI,IAAI;QACxB;MACF;MACA;MACA,OAAOZ,YAAY;IACrB,CAAC,CAAC,OAAOa,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,OAAOb,YAAY;IACrB;EACF,CAAC,CAAC;EAEFJ,SAAS,CAAC,MAAM;IACd,IAAI;MACF;MACA,MAAMmB,WAAW,GAAG;QAClBJ,OAAO,EAAEd,YAAY;QACrBe,IAAI,EAAEV;MACR,CAAC;MACDG,MAAM,CAACC,YAAY,CAACU,OAAO,CAACjB,GAAG,EAAEU,IAAI,CAACQ,SAAS,CAACF,WAAW,CAAC,CAAC;IAC/D,CAAC,CAAC,OAAOF,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACvD;EACF,CAAC,EAAE,CAACd,GAAG,EAAEG,KAAK,CAAC,CAAC;EAEhB,OAAO,CAACA,KAAK,EAAEC,QAAQ,CAAC;AAC1B;AAACF,EAAA,CAjCeH,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}